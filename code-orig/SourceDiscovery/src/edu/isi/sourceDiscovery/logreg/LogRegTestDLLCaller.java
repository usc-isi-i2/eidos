package edu.isi.sourceDiscovery.logreg;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import com.jstatcom.engine.Engine;
import com.jstatcom.engine.EngineTypes;
import com.jstatcom.engine.PCall;
import com.jstatcom.engine.matlab.MatlabLoadTypes;
import com.jstatcom.model.JSCData;
import com.jstatcom.model.JSCString;

/**
 * Interface to call the matlab dll logreg.dll
 * It calls it logregtest method
 * 
 * logreg is a classifier written by Anon that classifies the inputs.
 * 
 * @author dipsy
 *
 */
public class LogRegTestDLLCaller extends PCall {
	private JSCString inputFile;
	private JSCString model;
	private JSCString sortedOutputFile;
	private JSCString probabilityOutputFile;
	
	/**
	 * Constructor. Simple sets the class attributes
	 * @param inputFile - Name of the file containing the inputs that need to be classified
	 * @param model - Matlab model filename (.mat file)
	 * @param sortedOutputFile - File that would store the output probabilities in sorted manner
	 * @param probabilityOutputFile - File that would store the output probabilities
	 */
	public LogRegTestDLLCaller(String inputFile, String model, String sortedOutputFile, String probabilityOutputFile) {
		this.inputFile = new JSCString("inputfile", inputFile);
		this.model = new JSCString("model", model);
		this.sortedOutputFile = new JSCString("sortedOutputFile", sortedOutputFile);
		this.probabilityOutputFile = new JSCString("probabilityOutputFile", probabilityOutputFile);
	}
	
	/**
	 * Overrides the engine to be Matlab
	 */
	@Override
	public Engine engine() {
		return EngineTypes.MATLAB.getEngine();
	}

	
	/**
	 * Runs the logreg classifier
	 * The classifier runs and stores the output in the sortedOutputFile and probabilityOutputFile
	 * (Those were specified in the constructor)
	 */
	@Override
	protected void runCode() {
        // library has to be loaded first, does nothing if it was
        // loaded before
        engine().load("logreg", MatlabLoadTypes.USERLIB, null);

        // calls one of the test methods 'darraytest'
        // number of input and return args must be correct,
        // types must be compatible with required/returned Matlab types
        engine().call("logregtest", new JSCData[] { inputFile, model, sortedOutputFile, probabilityOutputFile}, null);

        // now out1 and out2 hold the results and can further be processed
        // on the Java side

	}

	/**
	 * This method should be called after runCode.
	 * It reads the output file generated by logreg and gets the index of the concept 
	 * that has the highest probability.
	 * @return
	 * @throws IOException
	 */
	public int getIndexOfHighestProbabilityMatch() throws IOException {
		BufferedReader reader = new BufferedReader(
									new FileReader(probabilityOutputFile.string()));
		int index = -1;
		float maxProb = -1;
		String line = reader.readLine();
		if(line != null) {
			String[] probs = line.split("\t");
			for(int i=0; i<probs.length; i++) {
				float prob = Float.parseFloat(probs[i]);
				if(prob > maxProb) {
					index = i+1;
					maxProb = prob;
				}
			}
		}
		return index;
	}
	
	public static void main(String[] args) {
		LogRegTestDLLCaller caller = new LogRegTestDLLCaller(
					"N:/Delicious/SourceDiscovery/data/logreg_input.txt", 
					"N:/Delicious/SourceDiscovery/data/model.mat", 
					"N:/Delicious/SourceDiscovery/data/logreg_output_sorted.txt", 
					"N:/Delicious/SourceDiscovery/data/logreg_output_probability.txt");
		caller.runCode();
		System.out.println("Finished!!");
		System.exit(0);
	}
}
